plot(density(accept.obs))
hist(accept
hist(accept.obs, prob=T, breaks=20, col="gray", main="", xlab="Accepted Observations")
hist(accept.obs, prob=T, breaks=20, col="gray", main="", xlab="Accepted Observations")
#inversion method
icdf <-  <- function(u){
if(0 < u & u < 0.5){
sqrt(2*u)-1
}else if(0.5 <= u & u < 1){
1 - sqrt(2*(-u+1))
}else{
u=0}
}
icdf <- function(u){
if(0 < u & u < 0.5){
sqrt(2*u)-1
}else if(0.5 <= u & u < 1){
1 - sqrt(2*(-u+1))
}else{
u=0}
}
U <- runif(100)
RVs <- sapply(U, icdf)
rand.unif <- runif(100,0,1)
rvs <- sapply(rand.unif, icdf)
rvs
hist(rvs, prob=T, breaks=20, col="black", main="", "Random Variables"
)
hist(accept.obs, prob=T, breaks=20, col="gray", main="Simple Rejection Method", xlab="Accepted Observations")
hist(rvs, prob=T, breaks=20, col="black", main="Inversion Method", "Random Variables")
rvs
hist(rvs, prob=T, breaks=20, col="black", main="Inversion Method", "Random Variables")
library(MASS)
truehist(rvs, prob=T, breaks=20, col="black", main="Inversion Method", "Random Variables")
truehist(rvs, col="black", main="Inversion Method", "Random Variables")
truehist(rvs, col="black", main="Inversion Method", xlab="Random Variables")
hist(rvs, col="black", main="Inversion Method", xlab="Random Variables")
hist(rvs, col="green", breaks=20, main="Inversion Method", xlab="Random Variables")
rand.unif <- runif(100,0.5,0.5)
rvs <- sapply(rand.unif, icdf)
library(MASS)
hist(rvs, col="green", breaks=20, main="Inversion Method", xlab="Random Variables")
hist(rvs, col="green", breaks=20, main="Inversion Method", xlab="Random Variables")
rand.unif <- runif(100,0,1)
rvs <- sapply(rand.unif, icdf)
library(MASS)
hist(rvs, col="green", breaks=20, main="Inversion Method", xlab="Random Variables")
hist(rvs, col="green", breaks=20, main="Inversion Method", xlab="Random Variables", c(-1,1))
hist(rvs, col="green", breaks=20, main="Inversion Method", xlab="Random Variables", xlim=c(-1,1))
hist(accept.obs, prob=T, breaks=20, col="gray", main="Simple Rejection Method", xlab="Accepted Observations")
hist(rvs, col="green", breaks=20, main="Inversion Method", xlab="Random Variables", xlim=c(-1,1))
rm(list=ls())
set.seed(333)
x.i <- runif(10,1,5)
tau.mle <- (5+min(x.i))/2
tau.m <- mean(x.i)
t.mle <- c()
t.mom <- c()
for(i in 1:10000){
boot <- sample(x.i, 10, replace = T)
t.mle[i] <- (5+min(boot))/2
t.mom[i] <- mean(boot)
}
ci.mle <- c(quantile(t.mle,0.025),quantile(t.mle,0.975))
ci.mom <- c(quantile(t.mle,0.025),quantile(t.mom,0.975))
ci.mle
ci.mom
Tboot <- c()
rm(list=ls())
set.seed(333)
x.i <- runif(10,1,5)
tau.mle <- (5+min(x.i))/2
tau.m <- mean(x.i)
t.mle <- c()
t.mom <- c()
Tboot <- c()
for(i in 1:10000){
boot <- sample(x.i, 10, replace = T)
t.mle[i] <- (5+min(boot))/2
t.mom[i] <- mean(boot)
Tboot[i] = mean(y.boot)/mean(z.boot)
}
se = sqrt(var(boot))
Tboot <- c()
for(i in 1:10000){
boot <- sample(x.i, 10, replace = T)
t.mle[i] <- (5+min(boot))/2
t.mom[i] <- mean(boot)
Tboot[i] = mean(t.mle)/mean(t.mom)
}
se = sqrt(var(Tboot))
Normal = c(T-2*se, T+2*se)
pivotal = c(2*T-quantile(Tboot,.975),2*T-quantile(Tboot,.025))
percentile = c(quantile(Tboot,.025),quantile(Tboot,.975))
pivot
pivotal
percentile
normal
Normal
se = sqrt(var(t.mle))
Normal = c(tau.mle-2*se, T+2*se)
Normal = c(tau.mle-2*se, tau.mle+2*se)
Normal
se.mom <- sqrt(var(t.mom))
tau.mom <- mean(x.i)
rm(list=ls())
set.seed(333)
x.i <- runif(10,1,5)
tau.mle <- (5+min(x.i))/2
tau.mom <- mean(x.i)
Normal.mom = c(tau.mom-2*se, tau.mom+2*se)
Normal.mle = c(tau.mle-2*se.mle, tau.mle+2*se.mle)
Normal.mom = c(tau.mom-2*se, tau.mom+2*se.mom)
se.mle = sqrt(var(t.mle))
se.mom <- sqrt(var(t.mom))
Normal.mle = c(tau.mle-2*se.mle, tau.mle+2*se.mle)
t.mle <- c()
t.mom <- c()
for(i in 1:10000){
boot <- sample(x.i, 10, replace = T)
t.mle[i] <- (5+min(boot))/2
t.mom[i] <- mean(boot)
}
se.mle = sqrt(var(t.mle))
se.mom <- sqrt(var(t.mom))
Normal.mle = c(tau.mle-2*se.mle, tau.mle+2*se.mle)
Normal.mom = c(tau.mom-2*se, tau.mom+2*se.mom)
Normal.mom = c(tau.mom-2*se.mom, tau.mom+2*se.mom)
Normal.mle
Normal.mom
percentile.mle <- c(quantile(t.mle,0.025),quantile(t.mle,0.975))
percentile.mom <- c(quantile(t.mom,0.025),quantile(t.mom,0.975))
pivotal.mle = c(2*tau.mle-quantile(t.mle,.975),2*tau.mle-quantile(t.mle,.025))
pivotal.mom = c(2*tau.mom-quantile(t.mom,.975),2*tau.mom-quantile(t.mom,.025))
percentile.mle <- c(quantile(t.mle,0.025),quantile(t.mle,0.975))
percentile.mom <- c(quantile(t.mom,0.025),quantile(t.mom,0.975))
pivotal.mle
pivotal.mom
percentile.mle
percentile.mom
Normal.mle
Normal.mom
pivotal.mle
pivotal.mom
percentile.mle
percentile.mom
rm(list=ls())
set.seed(333)
x.i <- runif(10,1,5)
tau.mle <- (5+min(x.i))/2
tau.mom <- mean(x.i)
t.mle <- c()
t.mom <- c()
for(i in 1:10000){
boot <- sample(x.i, 10, replace = T)
t.mle[i] <- 5+min(boot)/2
t.mom[i] <- mean(boot)
}
se.mle = sqrt(var(t.mle))
se.mom <- sqrt(var(t.mom))
Normal.mle = c(tau.mle-2*se.mle, tau.mle+2*se.mle)
Normal.mom = c(tau.mom-2*se.mom, tau.mom+2*se.mom)
pivotal.mle = c(2*tau.mle-quantile(t.mle,.975),2*tau.mle-quantile(t.mle,.025))
pivotal.mom = c(2*tau.mom-quantile(t.mom,.975),2*tau.mom-quantile(t.mom,.025))
percentile.mle <- c(quantile(t.mle,0.025),quantile(t.mle,0.975))
percentile.mom <- c(quantile(t.mom,0.025),quantile(t.mom,0.975))
Normal.mle
Normal.mom
pivotal.mle
pivotal.mom
percentile.mle
percentile.mom
rm(list=ls())
set.seed(333)
x.i <- runif(10,1,5)
tau.mle <- (5+min(x.i))/2
tau.mom <- mean(x.i)
t.mle <- c()
t.mom <- c()
for(i in 1:10000){
boot <- sample(x.i, 10, replace = T)
t.mle[i] <- (5+min(boot))/2
t.mom[i] <- mean(boot)
}
se.mle = sqrt(var(t.mle))
se.mom <- sqrt(var(t.mom))
Normal.mle = c(tau.mle-2*se.mle, tau.mle+2*se.mle)
Normal.mom = c(tau.mom-2*se.mom, tau.mom+2*se.mom)
pivotal.mle = c(2*tau.mle-quantile(t.mle,.975),2*tau.mle-quantile(t.mle,.025))
pivotal.mom = c(2*tau.mom-quantile(t.mom,.975),2*tau.mom-quantile(t.mom,.025))
percentile.mle <- c(quantile(t.mle,0.025),quantile(t.mle,0.975))
percentile.mom <- c(quantile(t.mom,0.025),quantile(t.mom,0.975))
Normal.mle
Normal.mom
pivotal.mle
pivotal.mom
percentile.mle
percentile.mom
rm(list=ls())
set.seed(333)
x.i <- runif(10,1,5)
tau.mle <- (5+min(x.i))/2
tau.mom <- mean(x.i)
t.mle <- c()
t.mom <- c()
for(i in 1:10000){
boot.obs <- sample(x.i, 10, replace = T)
t.mle[i] <- (5+min(boot.obs))/2
t.mom[i] <- mean(boot.obs)
}
se.mle = sqrt(var(t.mle))
se.mom <- sqrt(var(t.mom))
Normal.mle = c(tau.mle-2*se.mle, tau.mle+2*se.mle)
Normal.mom = c(tau.mom-2*se.mom, tau.mom+2*se.mom)
pivotal.mle = c(2*tau.mle-quantile(t.mle,.975),2*tau.mle-quantile(t.mle,.025))
pivotal.mom = c(2*tau.mom-quantile(t.mom,.975),2*tau.mom-quantile(t.mom,.025))
percentile.mle <- c(quantile(t.mle,0.025),quantile(t.mle,0.975))
percentile.mom <- c(quantile(t.mom,0.025),quantile(t.mom,0.975))
Normal.mle
Normal.mom
pivotal.mle
pivotal.mom
percentile.mle
percentile.mom
Normal.mom
pivotal.mle
Normal.mom
pivotal.mom
percentile.mom
rm(list=ls())
foverg <- function(theta){(sqrt(2/pi)*exp(theta^2/2)/theta)}
theta <- seq(0.000001, 10, length=1000)
opt.theta <-nlminb(0.00001,function(theta){foverg(theta)})$par
c <- nlminb(0.00001,function(theta){foverg(theta)})$objective
plot(theta,
(sqrt(2/pi)*exp(theta^2/2))/theta,
type="l",
col="red",
lwd=2,
ylim=c(0,5),
xlim=c(0,3),
ylab=expression(c[theta]),
xlab=expression(theta))
x <- 1.0001
points(x, y=sqrt(2/(pi*x^2))*exp((-x^2/2)+x^2), col="blue", pch=20)
legend("topright",legend=c(expression(optimal[theta])),
col="blue",pch=20, bty="n")
ub
opt.theta <- 1.00001
max(sqrt(2/(pi*opt.theta^2))*exp((-opt.theta^2/2)+opt.theta^2))
laplace.inv <- function(p){
if(p < 1/2){
log(2*p, base=exp(1))
} else {
-log(2*(1-p), base=exp(1))
}
}
p <- runif(1000)
laplace.rv <- sapply(p,laplace.inv) #random variables from laplace
hist(laplace.rv)
laplace.dist <- function(x){ #theta as 1
if(x<0){
(1/2)*exp(x)
}else {
(1/2)*exp(-x)
}
}
rvs <- seq(-6,6,length=1000)
laplace.pdf <- sapply(rvs,laplace.dist)
hist(laplace.rv, ylim=c(0,0.5), col="gray", xlab="random variables", prob=T, breaks=50, main="")
lines(density(laplace.rv), col="blue", lwd=2)
lines(rvs, laplace.pdf, col="red", lwd=2, lty=2)
legend("topleft",legend=c("Theoretical","Observed"),
col=c("red", "blue"),lwd=c(2,2), bty="n")
#generalized rejection method
goverf <- function(x,theta=1){y = sqrt(pi/2)*theta*exp((x^2/2)-theta*abs(x))}
xc <- laplace.rv
uc <- runif(1000,0,1)
tc <- c*sapply(xc,goverf) #a*g(x)/f(x)
ut <- uc*tc
accept.obs <- xc[ut <= 1]
length(accept.obs)/1000
nseq <- seq(-3,3,length=1000)
norm <- dnorm(nseq)
hist(accept.obs, col="gray", prob=T, breaks=50, ylim=c(0,0.6), xlab = "Accepted Observations", main="")
lines(nseq, norm, col="red", lwd=2)
lines(density(accept.obs), col="blue", lwd=2)
legend("topleft",legend=c("Theoretical","Observed"),
col=c("red", "blue"),lwd=c(2,2), bty="n")
R.Version()
R.Version()
rm(list=ls())
source('http://bioconductor.org/biocLite.R')
biocLite('AnnotationForge') # this was not in the original list - I added it to address load error in IlluminaHumanMethylation27k.db
install.packages('TCGAGBM',contriburl=contrib.url('http://watson.nci.nih.gov/~sdavis/software/R',type='source'),type='source')
ls -l /Library/Frameworks/R.framework/Versions/
/
R.Version()
R.Version()
install.packages('TCGAGBM',contriburl=contrib.url('http://watson.nci.nih.gov/~sdavis/software/R',type='source'),type='source')
library(TCGAGBM)
library(TCGAGBM)
install.packages('TCGAGBM',contriburl=contrib.url('http://watson.nci.nih.gov/~sdavis/software/R',type='source'),type='source')
source('http://bioconductor.org/biocLite.R')
biocLite('AnnotationForge') # this was not in the original list - I added it to address load error in IlluminaHumanMethylation27k.db
library(TCGAGBM)
biocLite('AnnotationForge') # this was not in the original list - I added it to address load error in IlluminaHumanMethylation27k.db
biocLite(c('Cairo','arrayQualityMetrics'),type='source')
biocLite(c('Cairo','arrayQualityMetrics'),type='source')
biocLite('impute')
biocLite('IlluminaHumanMethylation27k.db',type='source')
biocLite(c('Biobase','GEOquery'),type='source')
library(TCGAGBM)
install.packages('TCGAGBM',contriburl=contrib.url('http://watson.nci.nih.gov/~sdavis/software/R',type='source'),type='source')
library(TCGAGBM)
biocLite(c('GEOmetadb','DNAcopy','limma','Rgraphviz','SRAdb','xtable','methylumi'),type='source')
install.packages('TCGAGBM',contriburl=contrib.url('http://watson.nci.nih.gov/~sdavis/software/R',type='source'),type='source')
library(TCGAGBM)
source('http://bioconductor.org/biocLite.R')
biocLite(c('Cairo','arrayQualityMetrics')
)
biocLite('impute')
biocLite('IlluminaHumanMethylation27k.db')
biocLite(c('Biobase','GEOquery'))
biocLite(c('GEOmetadb','DNAcopy','limma','Rgraphviz','SRAdb','xtable','methylumi'))
install.packages('TCGAGBM',contriburl=contrib.url('http://watson.nci.nih.gov/~sdavis/software/R'))
,type='source'
install.packages('TCGAGBM',contriburl=contrib.url('http://watson.nci.nih.gov/~sdavis/software/R'),type='source')
library(TCGAGBM)
biocLite(c('GEOmetadb','DNAcopy','limma','Rgraphviz','SRAdb','xtable','methylumi'))
biocLite('GEOquery')
biocLite('GEOmetadb')
biocLite('DNAcopy')
biocLite('limma')
biocLite('limma')
biocLite('Rgraphviz')
biocLite('SRAdb')
biocLite('xtable')
biocLite('methylumi')
biocLite('methylumi')
install.packages("limma")
biocLite('methylumi')
biocLite('limma')
biocLite('methylumi')
biocLite('limma', type='source')
biocLite('methylumi', type='source')
install.packages('TCGAGBM',contriburl=contrib.url('http://watson.nci.nih.gov/~sdavis/software/R',type='source'),type='source')
biocLite('TCGAGBM',siteRepos='http://watson.nci.nih.gov/~sdavis/software/R',type='source')
library(TCGAGBM)
biocLite('methylumi', type='source')
biocLite('TCGAGBM',siteRepos='http://watson.nci.nih.gov/~sdavis/software/R',type='source')
library(TCGAGBM)
biocLite('Biobase')
biocLite('AnnotationForge') # this was not in the original list - I added it to address load error in IlluminaHumanMethylation27k.db
biocLite('Cairo')
biocLite('arrayQualityMetrics')
biocLite('impute')
biocLite('IlluminaHumanMethylation27k.db')
biocLite('GEOquery')
biocLite('GEOmetadb')
biocLite('DNAcopy')
biocLite('limma', type='source')
biocLite('limma')
biocLite('limma', type='source')
biocLite('limma')
biocLite('limma')
biocLite('limma')
library("limma", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
remove.packages('limma')
remove.packages('limma', lib)
biocLite('limma')
biocLite('limma', type='source')
biocLite('Rgraphviz')
biocLite('SRAdb')
biocLite('xtable')
biocLite('methylumi', type='source')
install.packages('TCGAGBM',contriburl=contrib.url('http://watson.nci.nih.gov/~sdavis/software/R',type='source'),type='source')
biocLite('minfi')
biocLite('methylumi', type='source')
biocLite('TCGAGBM',siteRepos='http://watson.nci.nih.gov/~sdavis/software/R',type='source')
library(TCGAGBM)
biocLite('methylumi', type='source')
biocLite('methylumi', type='source')
biocLite('methylumi', type='source')
?names
library(TCGAGBM)
?names
rm(list=ls())
R.Version()
rm(list=ls())
rm(list=ls())
getwd()
rm(list=ls())
graphics.off()
setwd("/Users/aarizvi/Desktop/")
install.packages("TCGARNASeqExperiment")
install.packages("TCGARNASeqExperiment", repos=NULL)
rm(list=ls()
)
library(TCGARNASeqExperiment)
data("GSE62944")
GSE62944
pca_tumor <- GSE62944[,GSE62944$cancer.subtype == "PRCA"]
GSE62944
pca_tumor
pca_tumor <- GSE62944[GSE62944$cancer.subtype == "PRCA",]
pca_tumor
table(GSE62944$cancer.subtype)
pca_tumor <- GSE62944[,GSE62944$cancer.subtype == "PRAD"]
pca_tumor
prad_tumor <- getCancerSubtype("PRAD")
prad_tumor <- assay(prad_tumor)
prad_tumor <- GSE62944[,GSE62944$cancer.subtype == "PRAD"]
prad_tumor <- assay(prad_tumor)
prad_tumor
prad_tumor <- GSE62944[,GSE62944$cancer.subtype == "PRAD"]
prad_tumor_rc <- assay(prad_tumor)
getAsSummarizedExperiment <-
function(assay, cancer_subtypes)
{
## determine number of columns
count <- scan(assay, character(), nlines=1, sep="\t")
ncol <- length(count)
## read all count data into matrix
count <- scan(assay, character(), sep="\t")
count <- matrix(count, ncol=ncol, byrow=TRUE)
dimnames(count) <- list(count[,1],count[1,])
count <- count[-1,-1]
mode(count) <- "integer"
## read colData into a DataFrame
## determine number of columns
#	clinical <- scan(clin_var, character(), nlines=1, sep="\t", quote="")
#	ncol <- length(clinical)
## read all sample data
# 	clinical <- scan(clin_var, character(), sep="\t", quote="")
# 	clinical <- matrix(clinical, ncol=ncol, byrow=TRUE)
# 	dimnames(clinical) <- list(clinical[,1], clinical[1,])
# 	clinical <- t(clinical[-1, -(1:3)])
## read in cancer subtype data
subtype <- scan(cancer_subtypes, character(), nlines=1, sep="\t")
ncol <- length(subtype)
subtype <- scan(cancer_subtypes, character(), sep="\t")
subtype <- matrix(subtype, ncol=ncol, byrow=TRUE)
rownames(subtype) <- subtype[,1]
## ensuring that rownames are in the same order
#	index <- match(rownames(clinical), rownames(subtype))
subtype <- subtype[index,]
## add clinical features and cancer subtype to colData
#	stopifnot(identical(rownames(subtype), rownames(clinical)))
colData <- DataFrame(subtype[,-1])
colnames(colData)[length(colnames(colData))] <- "cancer.subtype"
## convert into SummarizedExperiment
SummarizedExperiment(assay=count, colData=colData)
}
getAsSummarizedExperiment("/Users/aarizvi/Desktop/GEO_RNASeq/GSM1697009_06_01_15_TCGA_24.normal_Rsubread_FeatureCounts.txt.gz",
"/Users/aarizvi/Desktop/GEO_RNASeq/GSE62944_06_01_15_TCGA_24_Normal_CancerType_Samples.txt.gz")
getAsSummarizedExperiment <-
function(assay, cancer_subtypes)
{
## determine number of columns
count <- scan(assay, character(), nlines=1, sep="\t")
ncol <- length(count)
## read all count data into matrix
count <- scan(assay, character(), sep="\t")
count <- matrix(count, ncol=ncol, byrow=TRUE)
dimnames(count) <- list(count[,1],count[1,])
count <- count[-1,-1]
mode(count) <- "integer"
## read colData into a DataFrame
## determine number of columns
#	clinical <- scan(clin_var, character(), nlines=1, sep="\t", quote="")
#	ncol <- length(clinical)
## read all sample data
# 	clinical <- scan(clin_var, character(), sep="\t", quote="")
# 	clinical <- matrix(clinical, ncol=ncol, byrow=TRUE)
# 	dimnames(clinical) <- list(clinical[,1], clinical[1,])
# 	clinical <- t(clinical[-1, -(1:3)])
## read in cancer subtype data
subtype <- scan(cancer_subtypes, character(), nlines=1, sep="\t")
ncol <- length(subtype)
subtype <- scan(cancer_subtypes, character(), sep="\t")
subtype <- matrix(subtype, ncol=ncol, byrow=TRUE)
rownames(subtype) <- subtype[,1]
## ensuring that rownames are in the same order
#	index <- match(rownames(clinical), rownames(subtype))
#	subtype <- subtype[index,]
## add clinical features and cancer subtype to colData
#	stopifnot(identical(rownames(subtype), rownames(clinical)))
colData <- DataFrame(subtype[,-1])
colnames(colData)[length(colnames(colData))] <- "cancer.subtype"
## convert into SummarizedExperiment
SummarizedExperiment(assay=count, colData=colData)
}
prad_normal <- getAsSummarizedExperiment("/Users/aarizvi/Desktop/GEO_RNASeq/GSM1697009_06_01_15_TCGA_24.normal_Rsubread_FeatureCounts.txt.gz",
"/Users/aarizvi/Desktop/GEO_RNASeq/GSE62944_06_01_15_TCGA_24_Normal_CancerType_Samples.txt.gz")
prad_normal_rc <- assay(prad_norm)
prad_normal_rc <- assay(prad_normal)
dim(prad_normal)
dim(prad_tumor_rc)
setwd("/Users/aarizvi/Dropbox/Group2/Final Project/")
write.table(prad_normal_rc, file="prad_normal_raw_counts.txt")
write.table(prad_tumor_rc, file="prad_tumor_raw_counts.txt")
install.packages("nls2")
library(nls2)
nls2
library(pROC)
partial.auc
AUC
auc
UseMethod("auc")
getMethods("auc")
auc
